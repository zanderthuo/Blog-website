{
  "{\"sourceRoot\":\"/home/zander/2020Projects/blogwebsite/backend/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/zander/2020Projects/blogwebsite/backend\",\"filename\":\"/home/zander/2020Projects/blogwebsite/backend/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/zander/2020Projects/blogwebsite/backend\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/zander/2020Projects/blogwebsite/backend/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/zander/2020Projects/blogwebsite/backend",
      "filename": "/home/zander/2020Projects/blogwebsite/backend/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/zander/2020Projects/blogwebsite/backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/zander/2020Projects/blogwebsite/backend/src/server.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/zander/2020Projects/blogwebsite/backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/zander/2020Projects/blogwebsite/backend/src/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _mongodb = require(\"mongodb\");\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// const articlesInfo = {\n//     'learn-react': {\n//         upvotes: 0,\n//         comments: [],\n//     },\n//     'learn-node': {\n//         upvotes: 0,\n//         comments: [],\n//     },\n//     'my-thoughts-on-resumes': {\n//         upvotes: 0,\n//         comments: [],\n//     }\n// }\nvar app = (0, _express[\"default\"])();\napp.use(_express[\"default\"][\"static\"](_path[\"default\"].join(__dirname, '/build'))); // parse json object we have parsed with post request\n\napp.use(_bodyParser[\"default\"].json());\n\nvar withDB = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(operations, res) {\n    var client, db;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _mongodb.MongoClient.connect('mongodb://localhost:27017', {\n              useUnifiedTopology: true\n            });\n\n          case 3:\n            client = _context.sent;\n            db = client.db('reactblog');\n            _context.next = 7;\n            return operations(db);\n\n          case 7:\n            client.close();\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            res.status(500).json({\n              message: 'Error connecting to db',\n              error: _context.t0\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n\n  return function withDB(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(); // app.get('/hello', (req, res) => res.send('Hello'));\n// Getting article by name\n\n\napp.get('/api/articles/:name', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(req, res) {\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            withDB( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(db) {\n                var articleName, articlesInfo;\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        articleName = req.params.name;\n                        _context2.next = 3;\n                        return db.collection('articles').findOne({\n                          name: articleName\n                        });\n\n                      case 3:\n                        articlesInfo = _context2.sent;\n                        res.status(200).json(articlesInfo);\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x5) {\n                return _ref3.apply(this, arguments);\n              };\n            }(), res);\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}()); // Posting a vote for an article\n\napp.post('/api/articles/:name/upvte', /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(req, res) {\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            withDB( /*#__PURE__*/function () {\n              var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(db) {\n                var articleName, articlesInfo, updatedArticleInfo;\n                return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        articleName = req.params.name;\n                        _context4.next = 3;\n                        return db.collection('articles').findOne({\n                          name: articleName\n                        });\n\n                      case 3:\n                        articlesInfo = _context4.sent;\n                        _context4.next = 6;\n                        return db.collection('articles').updateOne({\n                          name: articleName\n                        }, {\n                          // Actual updates \n                          '$set': {\n                            upvtes: articlesInfo.upvtes + 1\n                          }\n                        }, res);\n\n                      case 6:\n                        _context4.next = 8;\n                        return db.collection('articles').findOne({\n                          name: articleName\n                        });\n\n                      case 8:\n                        updatedArticleInfo = _context4.sent;\n                        res.status(200).json(updatedArticleInfo);\n\n                      case 10:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n\n              return function (_x8) {\n                return _ref5.apply(this, arguments);\n              };\n            }());\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}());\napp.post('/api/articles/:name/add-comment', function (req, res) {\n  var _req$body = req.body,\n      username = _req$body.username,\n      text = _req$body.text;\n  var articleName = req.params.name;\n  withDB( /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(db) {\n      var articlesInfo, updatedArticleInfo;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return db.collection('articles').findOne({\n                name: articleName\n              });\n\n            case 2:\n              articlesInfo = _context6.sent;\n              _context6.next = 5;\n              return db.collection('articles').updateOne({\n                name: articleName\n              }, {\n                '$set': {\n                  comments: articlesInfo.comments.concat({\n                    username: username,\n                    text: text\n                  })\n                }\n              });\n\n            case 5:\n              _context6.next = 7;\n              return db.collection('articles').findOne({\n                name: articleName\n              });\n\n            case 7:\n              updatedArticleInfo = _context6.sent;\n              res.status(200).json(updatedArticleInfo);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x9) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), res); // res.status(200).send(articlesInfo[articleName]);\n}); // All requests that are caught by any of our API routes should be passed to our app\n\napp.get('*', function (req, res) {\n  res.sendFile(_path[\"default\"].join(__dirname + '/build/index.html'));\n});\napp.listen(8000, function () {\n  return console.log('Listening on port 8000');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJ1c2UiLCJleHByZXNzIiwicGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJib2R5UGFyc2VyIiwianNvbiIsIndpdGhEQiIsIm9wZXJhdGlvbnMiLCJyZXMiLCJNb25nb0NsaWVudCIsImNvbm5lY3QiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJjbGllbnQiLCJkYiIsImNsb3NlIiwic3RhdHVzIiwibWVzc2FnZSIsImVycm9yIiwiZ2V0IiwicmVxIiwiYXJ0aWNsZU5hbWUiLCJwYXJhbXMiLCJuYW1lIiwiY29sbGVjdGlvbiIsImZpbmRPbmUiLCJhcnRpY2xlc0luZm8iLCJwb3N0IiwidXBkYXRlT25lIiwidXB2dGVzIiwidXBkYXRlZEFydGljbGVJbmZvIiwiYm9keSIsInVzZXJuYW1lIiwidGV4dCIsImNvbW1lbnRzIiwiY29uY2F0Iiwic2VuZEZpbGUiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFNQSxHQUFHLEdBQUcsMEJBQVo7QUFFQUEsR0FBRyxDQUFDQyxHQUFKLENBQVFDLDhCQUFlQyxpQkFBS0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFFBQXJCLENBQWYsQ0FBUixFLENBQ0E7O0FBQ0FMLEdBQUcsQ0FBQ0MsR0FBSixDQUFRSyx1QkFBV0MsSUFBWCxFQUFSOztBQUVBLElBQU1DLE1BQU07QUFBQSxxRUFBRyxpQkFBT0MsVUFBUCxFQUFtQkMsR0FBbkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUdjQyxxQkFBWUMsT0FBWixDQUFvQiwyQkFBcEIsRUFBaUQ7QUFBRUMsY0FBQUEsa0JBQWtCLEVBQUU7QUFBdEIsYUFBakQsQ0FIZDs7QUFBQTtB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QTtBQUFBO0FBQUEsS0FBRDs7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQVVIckIsR0FWRyxDQUFOLENBSnNELENBZ0J0RDtBQUNILENBakJELEUsQ0FtQkE7O0FBQ0FWLEdBQUcsQ0FBQ29CLEdBQUosQ0FBUSxHQUFSLEVBQWEsVUFBQ0MsR0FBRCxFQUFNWCxHQUFOLEVBQWM7QUFDdkJBLEVBQUFBLEdBQUcsQ0FBQzJCLFFBQUosQ0FBYWxDLGlCQUFLQyxJQUFMLENBQVVDLFNBQVMsR0FBRyxtQkFBdEIsQ0FBYjtBQUNILENBRkQ7QUFJQUwsR0FBRyxDQUFDc0MsTUFBSixDQUFXLElBQVgsRUFBaUI7QUFBQSxTQUFNQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3QkFBWixDQUFOO0FBQUEsQ0FBakIiLCJzb3VyY2VSb290IjoiL2hvbWUvemFuZGVyLzIwMjBQcm9qZWN0cy9ibG9nd2Vic2l0ZS9iYWNrZW5kL3NyYy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbmltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSAnbW9uZ29kYidcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbi8vIGNvbnN0IGFydGljbGVzSW5mbyA9IHtcbi8vICAgICAnbGVhcm4tcmVhY3QnOiB7XG4vLyAgICAgICAgIHVwdm90ZXM6IDAsXG4vLyAgICAgICAgIGNvbW1lbnRzOiBbXSxcbi8vICAgICB9LFxuLy8gICAgICdsZWFybi1ub2RlJzoge1xuLy8gICAgICAgICB1cHZvdGVzOiAwLFxuLy8gICAgICAgICBjb21tZW50czogW10sXG4vLyAgICAgfSxcbi8vICAgICAnbXktdGhvdWdodHMtb24tcmVzdW1lcyc6IHtcbi8vICAgICAgICAgdXB2b3RlczogMCxcbi8vICAgICAgICAgY29tbWVudHM6IFtdLFxuLy8gICAgIH1cbi8vIH1cblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICcvYnVpbGQnKSkpO1xuLy8gcGFyc2UganNvbiBvYmplY3Qgd2UgaGF2ZSBwYXJzZWQgd2l0aCBwb3N0IHJlcXVlc3RcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXG5jb25zdCB3aXRoREIgPSBhc3luYyAob3BlcmF0aW9ucywgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQ29ubmVjdCB0byBtb25nb2RiXG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IE1vbmdvQ2xpZW50LmNvbm5lY3QoJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcnLCB7IHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSB9KTtcbiAgICAgICAgY29uc3QgZGIgPSBjbGllbnQuZGIoJ3JlYWN0YmxvZycpO1xuICAgIFxuICAgICAgICBhd2FpdCBvcGVyYXRpb25zKGRiKTtcbiAgICBcbiAgICAgICAgY2xpZW50LmNsb3NlKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRXJyb3IgY29ubmVjdGluZyB0byBkYicsIGVycm9yIH0pXG4gICAgfVxufVxuXG4vLyBhcHAuZ2V0KCcvaGVsbG8nLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKCdIZWxsbycpKTtcblxuLy8gR2V0dGluZyBhcnRpY2xlIGJ5IG5hbWVcbmFwcC5nZXQoJy9hcGkvYXJ0aWNsZXMvOm5hbWUnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB3aXRoREIgKGFzeW5jIChkYikgPT4ge1xuICAgICAgICBjb25zdCBhcnRpY2xlTmFtZSA9IHJlcS5wYXJhbXMubmFtZTtcblxuICAgICAgICBjb25zdCBhcnRpY2xlc0luZm8gPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCdhcnRpY2xlcycpLmZpbmRPbmUoeyBuYW1lOiBhcnRpY2xlTmFtZSB9KVxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihhcnRpY2xlc0luZm8pO1xuICAgIH0sIHJlcyk7XG59KVxuXG4vLyBQb3N0aW5nIGEgdm90ZSBmb3IgYW4gYXJ0aWNsZVxuYXBwLnBvc3QoJy9hcGkvYXJ0aWNsZXMvOm5hbWUvdXB2dGUnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB3aXRoREIoYXN5bmMgKGRiKSA9PiB7XG4gICAgICAgIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuXG4gICAgICAgIGNvbnN0IGFydGljbGVzSW5mbyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2FydGljbGVzJykuZmluZE9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0pO1xuICAgICAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdhcnRpY2xlcycpLnVwZGF0ZU9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0sIHtcbiAgICAgICAgICAgIC8vIEFjdHVhbCB1cGRhdGVzIFxuICAgICAgICAgICAgJyRzZXQnOiB7XG4gICAgICAgICAgICAgICAgdXB2dGVzOiBhcnRpY2xlc0luZm8udXB2dGVzICsgMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIHJlcyk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRBcnRpY2xlSW5mbyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2FydGljbGVzJykuZmluZE9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0pO1xuXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHVwZGF0ZWRBcnRpY2xlSW5mbyk7XG4gICAgfSlcbn0pO1xuXG5hcHAucG9zdCgnL2FwaS9hcnRpY2xlcy86bmFtZS9hZGQtY29tbWVudCcsIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHsgdXNlcm5hbWUsIHRleHQgfSA9IHJlcS5ib2R5O1xuICAgIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuICAgIFxuICAgIHdpdGhEQihhc3luYyAoZGIpID0+IHtcbiAgICAgICAgY29uc3QgYXJ0aWNsZXNJbmZvID0gYXdhaXQgZGIuY29sbGVjdGlvbignYXJ0aWNsZXMnKS5maW5kT25lKHsgbmFtZTogYXJ0aWNsZU5hbWUgfSk7XG4gICAgICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2FydGljbGVzJykudXBkYXRlT25lKHsgbmFtZTogYXJ0aWNsZU5hbWUgfSwge1xuICAgICAgICAgICAgJyRzZXQnOiB7XG4gICAgICAgICAgICAgICAgY29tbWVudHM6IGFydGljbGVzSW5mby5jb21tZW50cy5jb25jYXQoeyB1c2VybmFtZSwgdGV4dCB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB1cGRhdGVkQXJ0aWNsZUluZm8gPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCdhcnRpY2xlcycpLmZpbmRPbmUoeyBuYW1lOiBhcnRpY2xlTmFtZSB9KTtcblxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih1cGRhdGVkQXJ0aWNsZUluZm8pO1xuICAgIH0sIHJlcyk7XG5cbiAgICAvLyByZXMuc3RhdHVzKDIwMCkuc2VuZChhcnRpY2xlc0luZm9bYXJ0aWNsZU5hbWVdKTtcbn0pO1xuXG4vLyBBbGwgcmVxdWVzdHMgdGhhdCBhcmUgY2F1Z2h0IGJ5IGFueSBvZiBvdXIgQVBJIHJvdXRlcyBzaG91bGQgYmUgcGFzc2VkIHRvIG91ciBhcHBcbmFwcC5nZXQoJyonLCAocmVxLCByZXMpID0+IHtcbiAgICByZXMuc2VuZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSArICcvYnVpbGQvaW5kZXguaHRtbCcpKTtcbn0pXG5cbmFwcC5saXN0ZW4oODAwMCwgKCkgPT4gY29uc29sZS5sb2coJ0xpc3RlbmluZyBvbiBwb3J0IDgwMDAnKSk7Il19",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "use",
        "express",
        "path",
        "join",
        "__dirname",
        "bodyParser",
        "json",
        "withDB",
        "operations",
        "res",
        "MongoClient",
        "connect",
        "useUnifiedTopology",
        "client",
        "db",
        "close",
        "status",
        "message",
        "error",
        "get",
        "req",
        "articleName",
        "params",
        "name",
        "collection",
        "findOne",
        "articlesInfo",
        "post",
        "updateOne",
        "upvtes",
        "updatedArticleInfo",
        "body",
        "username",
        "text",
        "comments",
        "concat",
        "sendFile",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/home/zander/2020Projects/blogwebsite/backend/src/",
      "sourcesContent": [
        "import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb'\nimport path from 'path'\n\n// const articlesInfo = {\n//     'learn-react': {\n//         upvotes: 0,\n//         comments: [],\n//     },\n//     'learn-node': {\n//         upvotes: 0,\n//         comments: [],\n//     },\n//     'my-thoughts-on-resumes': {\n//         upvotes: 0,\n//         comments: [],\n//     }\n// }\n\nconst app = express();\n\napp.use(express.static(path.join(__dirname, '/build')));\n// parse json object we have parsed with post request\napp.use(bodyParser.json());\n\nconst withDB = async (operations, res) => {\n    try {\n        // Connect to mongodb\n        const client = await MongoClient.connect('mongodb://localhost:27017', { useUnifiedTopology: true });\n        const db = client.db('reactblog');\n    \n        await operations(db);\n    \n        client.close();\n    } catch (error) {\n        res.status(500).json({ message: 'Error connecting to db', error })\n    }\n}\n\n// app.get('/hello', (req, res) => res.send('Hello'));\n\n// Getting article by name\napp.get('/api/articles/:name', async (req, res) => {\n    withDB (async (db) => {\n        const articleName = req.params.name;\n\n        const articlesInfo = await db.collection('articles').findOne({ name: articleName })\n        res.status(200).json(articlesInfo);\n    }, res);\n})\n\n// Posting a vote for an article\napp.post('/api/articles/:name/upvte', async (req, res) => {\n    withDB(async (db) => {\n        const articleName = req.params.name;\n\n        const articlesInfo = await db.collection('articles').findOne({ name: articleName });\n        await db.collection('articles').updateOne({ name: articleName }, {\n            // Actual updates \n            '$set': {\n                upvtes: articlesInfo.upvtes + 1,\n            },\n        }, res);\n        const updatedArticleInfo = await db.collection('articles').findOne({ name: articleName });\n\n        res.status(200).json(updatedArticleInfo);\n    })\n});\n\napp.post('/api/articles/:name/add-comment', (req, res) => {\n    const { username, text } = req.body;\n    const articleName = req.params.name;\n    \n    withDB(async (db) => {\n        const articlesInfo = await db.collection('articles').findOne({ name: articleName });\n        await db.collection('articles').updateOne({ name: articleName }, {\n            '$set': {\n                comments: articlesInfo.comments.concat({ username, text }),\n            },\n        });\n        const updatedArticleInfo = await db.collection('articles').findOne({ name: articleName });\n\n        res.status(200).json(updatedArticleInfo);\n    }, res);\n\n    // res.status(200).send(articlesInfo[articleName]);\n});\n\n// All requests that are caught by any of our API routes should be passed to our app\napp.get('*', (req, res) => {\n    res.sendFile(path.join(__dirname + '/build/index.html'));\n})\n\napp.listen(8000, () => console.log('Listening on port 8000'));"
      ]
    },
    "sourceType": "script",
    "mtime": 1592603342633
  }
}